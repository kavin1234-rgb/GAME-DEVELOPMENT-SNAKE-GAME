#include <iostream>
#include <cstdlib>
#include <ctime>
#include <thread>
#include <chrono>

using namespace std;

// Define the snake size
const int width = 20;
const int height = 20;

// Define the game area
int x, y, fruitX, fruitY, score;
int tailX[100], tailY[100];
int nTail;

// Define the direction
enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN};
eDirection dir;

// Function to setup the initial game state
void setup() {
    dir = STOP;
    x = width / 2;
    y = height / 2;
    fruitX = rand() % width;
    fruitY = rand() % height;
    score = 0;
    nTail = 0;
}

// Function to draw the game field
void draw() {
    system("cls");  // Clear screen

    for (int i = 0; i < width + 2; i++)
        cout << "#";  // Top border
    cout << endl;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (j == 0)
                cout << "#";  // Left border
            if (i == y && j == x)
                cout << "O";  // Snake head
            else if (i == fruitY && j == fruitX)
                cout << "*";  // Fruit
            else {
                bool printTail = false;
                for (int k = 0; k < nTail; k++) {
                    if (tailX[k] == j && tailY[k] == i) {
                        cout << "o";  // Snake tail
                        printTail = true;
                    }
                }
                if (!printTail)
                    cout << " ";  // Empty space
            }

            if (j == width - 1)
                cout << "#";  // Right border
        }
        cout << endl;
    }

    for (int i = 0; i < width + 2; i++)
        cout << "#";  // Bottom border
    cout << endl;

    cout << "Score: " << score << endl;
}

// Function to handle user input for controlling the snake
void input() {
    if (cin.peek() != EOF) {
        char currentInput;
        cin >> currentInput;

        switch (currentInput) {
        case 'a':
            dir = LEFT;
            break;
        case 'd':
            dir = RIGHT;
            break;
        case 'w':
            dir = UP;
            break;
        case 's':
            dir = DOWN;
            break;
        case 'x':  // Pressing 'x' will quit the game
            dir = STOP;
            break;
        }
    }
}

// Function to update the snake's position
void logic() {
    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;

    for (int i = 1; i < nTail; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }

    switch (dir) {
    case LEFT:
        x--;
        break;
    case RIGHT:
        x++;
        break;
    case UP:
        y--;
        break;
    case DOWN:
        y++;
        break;
    }

    // If snake hits the wall
    if (x >= width) x = 0;
    else if (x < 0) x = width - 1;
    if (y >= height) y = 0;
    else if (y < 0) y = height - 1;

    // If snake eats the fruit
    if (x == fruitX && y == fruitY) {
        score += 10;
        fruitX = rand() % width;
        fruitY = rand() % height;
        nTail++;
    }

    // If snake hits itself
    for (int i = 0; i < nTail; i++) {
        if (tailX[i] == x && tailY[i] == y) {
            dir = STOP;
            break;
        }
    }
}

int main() {
    setup();
    
    while (dir != STOP) {
        draw();
        input();
        logic();
        std::this_thread::sleep_for(std::chrono::milliseconds(100));  // Sleep to create delay and control the speed
    }

    cout << "Game Over! Final Score: " << score << endl;
    return 0;
}
